{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Container/Container.jsx","components/Panel/Panel.jsx","App.js","index.js"],"names":["ContactForm","state","name","number","handleNameChange","e","setState","currentTarget","value","handleNumberChange","handleSubmit","preventDefault","props","onSubmit","className","this","type","onChange","pattern","title","required","aria-label","Component","ContactItem","contacts","onDeleteContact","map","id","onClick","ContactList","Filter","Container","children","Panel","App","filter","ifContactExists","some","contact","addContact","shortid","generate","alert","deleteContact","contactId","prevState","changeFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","totalContactsCount","length","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49b17faa.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleNameChange = e => {\n    this.setState({ name: e.currentTarget.value });\n  };\n\n  handleNumberChange = e => {\n    this.setState({ number: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state.name, this.state.number);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\n        <label className=\"ContactForm__label\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"ContactForm__input\"\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"ContactForm__label\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            className=\"ContactForm__input\"\n            value={this.state.number}\n            onChange={this.handleNumberChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className=\"ContactForm__button\"\n          aria-label=\"Add contact\"\n        >\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import './ContactList.scss';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contacts, onDeleteContact }) =>\n  contacts.map(({ id, name, number }) => (\n    <li key={id} className=\"ContactList__item\">\n      <p className=\"ContactList__text\">\n        {name}: &#x2121; {number}\n      </p>\n      <button\n        type=\"button\"\n        className=\"ContactList__btn\"\n        aria-label=\"Delete\"\n        onClick={() => onDeleteContact(id)}\n      >\n        &#128465;\n      </button>\n    </li>\n  ));\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"ContactList\">\n    <ContactItem contacts={contacts} onDeleteContact={onDeleteContact} />\n  </ul>\n);\n\nexport default ContactList;\n","import './Filter.scss';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"Filter__label\">\n    &#x1F50D; Search contacts by name\n    <input\n      type=\"text\"\n      value={value}\n      className=\"Filter__input\"\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import './Panel.scss';\n\nconst Panel = ({ children }) => <div className=\"Panel\">{children}</div>;\n\nexport default Panel;\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Container from './components/Container';\nimport Panel from './components/Panel';\n\nclass App extends Component {\n  state = {\n    // contacts: [\n    //   {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    //   {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    //   {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    //   {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    // ],\n    contacts: [],\n    filter: '',\n    name: '',\n    number: '',\n  };\n\n  // dynamicSort = (property) => {\n  //   let sortOrder = 1;\n  //   if(property[0] === \"-\") {\n  //       sortOrder = -1;\n  //       property = property.substr(1);\n  //   }\n  //   return function (a,b) {\n  //     let result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\n  //     return result * sortOrder;\n  //   }\n  // }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  ifContactExists = name => {\n    return this.state.contacts.some(contact => contact.name === name);\n  };\n\n  addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    };\n\n    if (!this.ifContactExists(name)) {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n      // this.state.contacts.sort(this.dynamicSort(\"name\"));\n    } else {\n      alert(`${name} is already in contacts.`);\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const totalContactsCount = contacts.length;\n    const visibleContacts = this.getFilteredContacts();\n\n    return (\n      <Container>\n        <Panel>\n          <h1>Phonebook</h1>\n          <ContactForm onSubmit={this.addContact} />\n        </Panel>\n        <Panel>\n          <h1>Contacts</h1>\n          <p className=\"total\">Total amount: {totalContactsCount}</p>\n          <Filter value={filter} onChange={this.changeFilter} />\n          <ContactList\n            contacts={visibleContacts}\n            // contacts={this.state.contacts}\n            onDeleteContact={this.deleteContact}\n          />\n        </Panel>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n// import './styles.scss';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}